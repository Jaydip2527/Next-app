{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 23, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/middleware.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\n\nexport function middleware(req: NextRequest) {\n  const token = req.cookies.get(\"token\")?.value || null;\n  const contact_verified =\n    req.cookies.get(\"contact_no_verified\")?.value || null;\n  const curAddress = req.cookies.get(\"curAddress\")?.value || null;\n  const organizations = req.cookies.get(\"organizations\")?.value || null;\n  const first_org = req.cookies.get(\"first_organisation\")?.value || null;\n  const contact_verify_token =\n    req.cookies.get(\"contact_no_verification_token\")?.value || null;\n  const email_verify_token =\n    req.cookies.get(\"email_verification_token\")?.value || null;\n  const user = req.cookies.get(\"user\")?.value || null;\n\n  // Publicly accessible routes\n  const publicRoutes = [\n    \"/signin\",\n    \"/\",\n    \"/forgotpassword\",\n    // \"/reset-password\",\n    \"/otpverify\",\n  ];\n\n  // âœ… Allow dynamic reset-password route (e.g., `/reset-password/abc123`)\n  const isResetPasswordRoute = /^\\/reset-password\\/[^/]+$/.test(\n    req.nextUrl.pathname\n  );\n\n  // Case 0: If user is logged out and accesing otpverify, redirect to signin\n  if (\n    !token &&\n    !contact_verify_token &&\n    !email_verify_token &&\n    req.nextUrl.pathname === \"/otpverify\"\n  ) {\n    return NextResponse.redirect(new URL(\"/signin\", req.url));\n  }\n\n  // Case 1: If user is logged in but not verified, redirect to OTP verify\n  if (\n    token &&\n    contact_verified === \"false\" &&\n    req.nextUrl.pathname !== \"/otpverify\"\n  ) {\n    return NextResponse.redirect(new URL(\"/otpverify\", req.url));\n  }\n\n  // Case 2: If user has verification tokens but no auth token, allow \"/otpverify\"\n  if (\n    !token &&\n    contact_verify_token &&\n    email_verify_token &&\n    user &&\n    req.nextUrl.pathname !== \"/otpverify\"\n  ) {\n    return NextResponse.redirect(new URL(\"/otpverify\", req.url));\n  }\n\n  // Case 3: If user is logged in and verification is complete, handle profile setup\n  if (token && contact_verified === \"true\") {\n    if (\n      !curAddress &&\n      first_org !== \"true\" &&\n      (!organizations || organizations === \"0\") &&\n      req.nextUrl.pathname !== \"/organizationprofile\"\n    ) {\n      return NextResponse.redirect(new URL(\"/organizationprofile\", req.url));\n    }\n    // if (\n    //   !curAddress &&\n    //   organizations !== \"0\" &&\n    //   organizations !== \"1\" &&\n    //   req.nextUrl.pathname !== \"/select-organization-profile\"\n    // ) {\n    //   return NextResponse.redirect(\n    //     new URL(\"/select-organization-profile\", req.url)\n    //   );\n    // }\n  }\n\n  // Case 4: If user is authenticated and tries to access public routes (except otpverify), redirect to dashboard\n  if (\n    token &&\n    publicRoutes.includes(req.nextUrl.pathname) &&\n    req.nextUrl.pathname !== \"/otpverify\"\n  ) {\n    return NextResponse.redirect(new URL(\"/dashboard\", req.url));\n  }\n\n  // Case 5: If user is NOT authenticated and is trying to access a protected route (except otpverify), redirect to login\n  if (\n    !token &&\n    !publicRoutes.includes(req.nextUrl.pathname) &&\n    !isResetPasswordRoute\n  ) {\n    return NextResponse.redirect(new URL(\"/signin\", req.url));\n  }\n\n  return NextResponse.next(); // Allow request to proceed\n}\n\n// Apply middleware to protected routes\nexport const config = {\n  matcher: [\n    \"/((?!api|_next/static|_next/image|favicon.ico|images|next.svg|vercel.svg).*)\",\n  ],\n};\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,SAAS,WAAW,GAAgB;IACzC,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU,SAAS;IACjD,MAAM,mBACJ,IAAI,OAAO,CAAC,GAAG,CAAC,wBAAwB,SAAS;IACnD,MAAM,aAAa,IAAI,OAAO,CAAC,GAAG,CAAC,eAAe,SAAS;IAC3D,MAAM,gBAAgB,IAAI,OAAO,CAAC,GAAG,CAAC,kBAAkB,SAAS;IACjE,MAAM,YAAY,IAAI,OAAO,CAAC,GAAG,CAAC,uBAAuB,SAAS;IAClE,MAAM,uBACJ,IAAI,OAAO,CAAC,GAAG,CAAC,kCAAkC,SAAS;IAC7D,MAAM,qBACJ,IAAI,OAAO,CAAC,GAAG,CAAC,6BAA6B,SAAS;IACxD,MAAM,OAAO,IAAI,OAAO,CAAC,GAAG,CAAC,SAAS,SAAS;IAE/C,6BAA6B;IAC7B,MAAM,eAAe;QACnB;QACA;QACA;QACA,qBAAqB;QACrB;KACD;IAED,wEAAwE;IACxE,MAAM,uBAAuB,4BAA4B,IAAI,CAC3D,IAAI,OAAO,CAAC,QAAQ;IAGtB,2EAA2E;IAC3E,IACE,CAAC,SACD,CAAC,wBACD,CAAC,sBACD,IAAI,OAAO,CAAC,QAAQ,KAAK,cACzB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,IAAI,GAAG;IACzD;IAEA,wEAAwE;IACxE,IACE,SACA,qBAAqB,WACrB,IAAI,OAAO,CAAC,QAAQ,KAAK,cACzB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;IAC5D;IAEA,gFAAgF;IAChF,IACE,CAAC,SACD,wBACA,sBACA,QACA,IAAI,OAAO,CAAC,QAAQ,KAAK,cACzB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;IAC5D;IAEA,kFAAkF;IAClF,IAAI,SAAS,qBAAqB,QAAQ;QACxC,IACE,CAAC,cACD,cAAc,UACd,CAAC,CAAC,iBAAiB,kBAAkB,GAAG,KACxC,IAAI,OAAO,CAAC,QAAQ,KAAK,wBACzB;YACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,wBAAwB,IAAI,GAAG;QACtE;IACA,OAAO;IACP,mBAAmB;IACnB,6BAA6B;IAC7B,6BAA6B;IAC7B,4DAA4D;IAC5D,MAAM;IACN,kCAAkC;IAClC,uDAAuD;IACvD,OAAO;IACP,IAAI;IACN;IAEA,+GAA+G;IAC/G,IACE,SACA,aAAa,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,KAC1C,IAAI,OAAO,CAAC,QAAQ,KAAK,cACzB;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,cAAc,IAAI,GAAG;IAC5D;IAEA,uHAAuH;IACvH,IACE,CAAC,SACD,CAAC,aAAa,QAAQ,CAAC,IAAI,OAAO,CAAC,QAAQ,KAC3C,CAAC,sBACD;QACA,OAAO,qLAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,WAAW,IAAI,GAAG;IACzD;IAEA,OAAO,qLAAA,CAAA,eAAY,CAAC,IAAI,IAAI,2BAA2B;AACzD;AAGO,MAAM,SAAS;IACpB,SAAS;QACP;KACD;AACH"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}